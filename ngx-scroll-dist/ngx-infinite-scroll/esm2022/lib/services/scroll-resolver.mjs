export function shouldFireScrollEvent(container, distance = { down: 0, up: 0 }, scrollingDown) {
    let remaining;
    let containerBreakpoint;
    if (container.totalToScroll <= 0) {
        return false;
    }
    const scrolledUntilNow = container.isWindow
        ? container.scrolled
        : container.height + container.scrolled;
    if (scrollingDown) {
        remaining =
            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;
        const distanceDown = distance?.down ? distance.down : 0;
        containerBreakpoint = distanceDown / 10;
    }
    else {
        const totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);
        remaining = container.scrolled / totalHiddenContentHeight;
        const distanceUp = distance?.up ? distance.up : 0;
        containerBreakpoint = distanceUp / 10;
    }
    const shouldFireEvent = remaining <= containerBreakpoint;
    return shouldFireEvent;
}
export function isScrollingDownwards(lastScrollPosition, container) {
    return lastScrollPosition < container.scrolled;
}
export function getScrollStats(lastScrollPosition, container, distance) {
    const scrollDown = isScrollingDownwards(lastScrollPosition, container);
    return {
        fire: shouldFireScrollEvent(container, distance, scrollDown),
        scrollDown,
    };
}
export function updateScrollPosition(position, scrollState) {
    return (scrollState.lastScrollPosition = position);
}
export function updateTotalToScroll(totalToScroll, scrollState) {
    if (scrollState.lastTotalToScroll !== totalToScroll) {
        scrollState.lastTotalToScroll = scrollState.totalToScroll;
        scrollState.totalToScroll = totalToScroll;
    }
}
export function isSameTotalToScroll(scrollState) {
    return scrollState.totalToScroll === scrollState.lastTotalToScroll;
}
export function updateTriggeredFlag(scroll, scrollState, triggered, isScrollingDown) {
    if (isScrollingDown) {
        scrollState.triggered.down = scroll;
    }
    else {
        scrollState.triggered.up = scroll;
    }
}
export function isTriggeredScroll(totalToScroll, scrollState, isScrollingDown) {
    return isScrollingDown
        ? scrollState.triggered.down === totalToScroll
        : scrollState.triggered.up === totalToScroll;
}
export function updateScrollState(scrollState, scrolledUntilNow, totalToScroll) {
    updateScrollPosition(scrolledUntilNow, scrollState);
    updateTotalToScroll(totalToScroll, scrollState);
    // const isSameTotal = isSameTotalToScroll(scrollState);
    // if (!isSameTotal) {
    //   updateTriggeredFlag(scrollState, false, isScrollingDown);
    // }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWluZmluaXRlLXNjcm9sbC9zcmMvbGliL3NlcnZpY2VzL3Njcm9sbC1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUscUJBQXFCLENBQ25DLFNBQXlCLEVBQ3pCLFdBQThCLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQ2hELGFBQXNCO0lBRXRCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLG1CQUEyQixDQUFDO0lBQ2hDLElBQUksU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFFBQVE7UUFDekMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRO1FBQ3BCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDMUMsSUFBSSxhQUFhLEVBQUU7UUFDakIsU0FBUztZQUNQLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDekUsTUFBTSxZQUFZLEdBQUcsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELG1CQUFtQixHQUFHLFlBQVksR0FBRyxFQUFFLENBQUM7S0FDekM7U0FBTTtRQUNMLE1BQU0sd0JBQXdCLEdBQzVCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLENBQUM7UUFDcEUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7UUFDMUQsTUFBTSxVQUFVLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELG1CQUFtQixHQUFHLFVBQVUsR0FBRyxFQUFFLENBQUM7S0FDdkM7SUFFRCxNQUFNLGVBQWUsR0FBWSxTQUFTLElBQUksbUJBQW1CLENBQUM7SUFDbEUsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FDbEMsa0JBQTBCLEVBQzFCLFNBQXlCO0lBRXpCLE9BQU8sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsa0JBQTBCLEVBQzFCLFNBQXlCLEVBQ3pCLFFBQTJCO0lBRTNCLE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZFLE9BQU87UUFDTCxJQUFJLEVBQUUscUJBQXFCLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7UUFDNUQsVUFBVTtLQUNYLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxRQUFnQixFQUNoQixXQUF5QjtJQUV6QixPQUFPLENBQUMsV0FBVyxDQUFDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLGFBQXFCLEVBQ3JCLFdBQXlCO0lBRXpCLElBQUksV0FBVyxDQUFDLGlCQUFpQixLQUFLLGFBQWEsRUFBRTtRQUNuRCxXQUFXLENBQUMsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQztRQUMxRCxXQUFXLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztLQUMzQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsV0FBeUI7SUFDM0QsT0FBTyxXQUFXLENBQUMsYUFBYSxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxNQUFjLEVBQ2QsV0FBeUIsRUFDekIsU0FBa0IsRUFDbEIsZUFBd0I7SUFFeEIsSUFBSSxlQUFlLEVBQUU7UUFDbkIsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ3JDO1NBQU07UUFDTCxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7S0FDbkM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixhQUFxQixFQUNyQixXQUF5QixFQUN6QixlQUF3QjtJQUV4QixPQUFPLGVBQWU7UUFDcEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLGFBQWE7UUFDOUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLGFBQWEsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixXQUF5QixFQUN6QixnQkFBd0IsRUFDeEIsYUFBcUI7SUFFckIsb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDcEQsbUJBQW1CLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELHdEQUF3RDtJQUN4RCxzQkFBc0I7SUFDdEIsOERBQThEO0lBQzlELElBQUk7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVBvc2l0aW9uU3RhdHMsIElTY3JvbGxTdGF0ZSwgSVNjcm9sbGVyRGlzdGFuY2UgfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZpcmVTY3JvbGxFdmVudChcclxuICBjb250YWluZXI6IElQb3NpdGlvblN0YXRzLFxyXG4gIGRpc3RhbmNlOiBJU2Nyb2xsZXJEaXN0YW5jZSA9IHsgZG93bjogMCwgdXA6IDAgfSxcclxuICBzY3JvbGxpbmdEb3duOiBib29sZWFuXHJcbikge1xyXG4gIGxldCByZW1haW5pbmc6IG51bWJlcjtcclxuICBsZXQgY29udGFpbmVyQnJlYWtwb2ludDogbnVtYmVyO1xyXG4gIGlmIChjb250YWluZXIudG90YWxUb1Njcm9sbCA8PSAwKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBzY3JvbGxlZFVudGlsTm93ID0gY29udGFpbmVyLmlzV2luZG93XHJcbiAgICA/IGNvbnRhaW5lci5zY3JvbGxlZFxyXG4gICAgOiBjb250YWluZXIuaGVpZ2h0ICsgY29udGFpbmVyLnNjcm9sbGVkO1xyXG4gIGlmIChzY3JvbGxpbmdEb3duKSB7XHJcbiAgICByZW1haW5pbmcgPVxyXG4gICAgICAoY29udGFpbmVyLnRvdGFsVG9TY3JvbGwgLSBzY3JvbGxlZFVudGlsTm93KSAvIGNvbnRhaW5lci50b3RhbFRvU2Nyb2xsO1xyXG4gICAgY29uc3QgZGlzdGFuY2VEb3duID0gZGlzdGFuY2U/LmRvd24gPyBkaXN0YW5jZS5kb3duIDogMDtcclxuICAgIGNvbnRhaW5lckJyZWFrcG9pbnQgPSBkaXN0YW5jZURvd24gLyAxMDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgdG90YWxIaWRkZW5Db250ZW50SGVpZ2h0ID1cclxuICAgICAgY29udGFpbmVyLnNjcm9sbGVkICsgKGNvbnRhaW5lci50b3RhbFRvU2Nyb2xsIC0gc2Nyb2xsZWRVbnRpbE5vdyk7XHJcbiAgICByZW1haW5pbmcgPSBjb250YWluZXIuc2Nyb2xsZWQgLyB0b3RhbEhpZGRlbkNvbnRlbnRIZWlnaHQ7XHJcbiAgICBjb25zdCBkaXN0YW5jZVVwID0gZGlzdGFuY2U/LnVwID8gZGlzdGFuY2UudXAgOiAwO1xyXG4gICAgY29udGFpbmVyQnJlYWtwb2ludCA9IGRpc3RhbmNlVXAgLyAxMDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNob3VsZEZpcmVFdmVudDogYm9vbGVhbiA9IHJlbWFpbmluZyA8PSBjb250YWluZXJCcmVha3BvaW50O1xyXG4gIHJldHVybiBzaG91bGRGaXJlRXZlbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbGluZ0Rvd253YXJkcyhcclxuICBsYXN0U2Nyb2xsUG9zaXRpb246IG51bWJlcixcclxuICBjb250YWluZXI6IElQb3NpdGlvblN0YXRzXHJcbikge1xyXG4gIHJldHVybiBsYXN0U2Nyb2xsUG9zaXRpb24gPCBjb250YWluZXIuc2Nyb2xsZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxTdGF0cyhcclxuICBsYXN0U2Nyb2xsUG9zaXRpb246IG51bWJlcixcclxuICBjb250YWluZXI6IElQb3NpdGlvblN0YXRzLFxyXG4gIGRpc3RhbmNlOiBJU2Nyb2xsZXJEaXN0YW5jZVxyXG4pIHtcclxuICBjb25zdCBzY3JvbGxEb3duID0gaXNTY3JvbGxpbmdEb3dud2FyZHMobGFzdFNjcm9sbFBvc2l0aW9uLCBjb250YWluZXIpO1xyXG4gIHJldHVybiB7XHJcbiAgICBmaXJlOiBzaG91bGRGaXJlU2Nyb2xsRXZlbnQoY29udGFpbmVyLCBkaXN0YW5jZSwgc2Nyb2xsRG93biksXHJcbiAgICBzY3JvbGxEb3duLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTY3JvbGxQb3NpdGlvbihcclxuICBwb3NpdGlvbjogbnVtYmVyLFxyXG4gIHNjcm9sbFN0YXRlOiBJU2Nyb2xsU3RhdGVcclxuKSB7XHJcbiAgcmV0dXJuIChzY3JvbGxTdGF0ZS5sYXN0U2Nyb2xsUG9zaXRpb24gPSBwb3NpdGlvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVUb3RhbFRvU2Nyb2xsKFxyXG4gIHRvdGFsVG9TY3JvbGw6IG51bWJlcixcclxuICBzY3JvbGxTdGF0ZTogSVNjcm9sbFN0YXRlXHJcbikge1xyXG4gIGlmIChzY3JvbGxTdGF0ZS5sYXN0VG90YWxUb1Njcm9sbCAhPT0gdG90YWxUb1Njcm9sbCkge1xyXG4gICAgc2Nyb2xsU3RhdGUubGFzdFRvdGFsVG9TY3JvbGwgPSBzY3JvbGxTdGF0ZS50b3RhbFRvU2Nyb2xsO1xyXG4gICAgc2Nyb2xsU3RhdGUudG90YWxUb1Njcm9sbCA9IHRvdGFsVG9TY3JvbGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lVG90YWxUb1Njcm9sbChzY3JvbGxTdGF0ZTogSVNjcm9sbFN0YXRlKSB7XHJcbiAgcmV0dXJuIHNjcm9sbFN0YXRlLnRvdGFsVG9TY3JvbGwgPT09IHNjcm9sbFN0YXRlLmxhc3RUb3RhbFRvU2Nyb2xsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVHJpZ2dlcmVkRmxhZyhcclxuICBzY3JvbGw6IG51bWJlcixcclxuICBzY3JvbGxTdGF0ZTogSVNjcm9sbFN0YXRlLFxyXG4gIHRyaWdnZXJlZDogYm9vbGVhbixcclxuICBpc1Njcm9sbGluZ0Rvd246IGJvb2xlYW5cclxuKSB7XHJcbiAgaWYgKGlzU2Nyb2xsaW5nRG93bikge1xyXG4gICAgc2Nyb2xsU3RhdGUudHJpZ2dlcmVkLmRvd24gPSBzY3JvbGw7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNjcm9sbFN0YXRlLnRyaWdnZXJlZC51cCA9IHNjcm9sbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RyaWdnZXJlZFNjcm9sbChcclxuICB0b3RhbFRvU2Nyb2xsOiBudW1iZXIsXHJcbiAgc2Nyb2xsU3RhdGU6IElTY3JvbGxTdGF0ZSxcclxuICBpc1Njcm9sbGluZ0Rvd246IGJvb2xlYW5cclxuKSB7XHJcbiAgcmV0dXJuIGlzU2Nyb2xsaW5nRG93blxyXG4gICAgPyBzY3JvbGxTdGF0ZS50cmlnZ2VyZWQuZG93biA9PT0gdG90YWxUb1Njcm9sbFxyXG4gICAgOiBzY3JvbGxTdGF0ZS50cmlnZ2VyZWQudXAgPT09IHRvdGFsVG9TY3JvbGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTY3JvbGxTdGF0ZShcclxuICBzY3JvbGxTdGF0ZTogSVNjcm9sbFN0YXRlLFxyXG4gIHNjcm9sbGVkVW50aWxOb3c6IG51bWJlcixcclxuICB0b3RhbFRvU2Nyb2xsOiBudW1iZXJcclxuKSB7XHJcbiAgdXBkYXRlU2Nyb2xsUG9zaXRpb24oc2Nyb2xsZWRVbnRpbE5vdywgc2Nyb2xsU3RhdGUpO1xyXG4gIHVwZGF0ZVRvdGFsVG9TY3JvbGwodG90YWxUb1Njcm9sbCwgc2Nyb2xsU3RhdGUpO1xyXG4gIC8vIGNvbnN0IGlzU2FtZVRvdGFsID0gaXNTYW1lVG90YWxUb1Njcm9sbChzY3JvbGxTdGF0ZSk7XHJcbiAgLy8gaWYgKCFpc1NhbWVUb3RhbCkge1xyXG4gIC8vICAgdXBkYXRlVHJpZ2dlcmVkRmxhZyhzY3JvbGxTdGF0ZSwgZmFsc2UsIGlzU2Nyb2xsaW5nRG93bik7XHJcbiAgLy8gfVxyXG59XHJcbiJdfQ==